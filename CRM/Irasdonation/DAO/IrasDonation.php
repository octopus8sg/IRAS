<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from irasdonation
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:c89c8382adcaf9b4092cd32773df2d76)
 */
use CRM_Irasdonation_ExtensionUtil as E;

/**
 * Database access object for the IrasDonation entity.
 */
class CRM_Irasdonation_DAO_IrasDonation extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_iras_donation';

        /**
         * Primary key field(s).
         *
         * @var string[]
         */
        public static $_primaryKey = [];

        /**
         * Should CiviCRM log any modifications to this table in the civicrm_log table.
         *
         * @var bool
         */
        public static $_log = TRUE;

        /**
         * FK to Contact
         *
         * @var int|string|null
         *   (SQL type: int unsigned)
         *   Note that values will be retrieved from the database as a string.
         */
        public $contribution_id;

        /**
         * Created date
         *
         * @var string|null
         *   (SQL type: datetime)
         *   Note that values will be retrieved from the database as a string.
         */
        public $created_date;

        /**
         * Class constructor.
         */
        public function __construct() {
          $this->__table = 'civicrm_iras_donation';
          parent::__construct();
        }

        /**
         * Returns localized title of this entity.
         *
         * @param bool $plural
         *   Whether to return the plural version of the title.
         */
        public static function getEntityTitle($plural = FALSE) {
          return $plural ? E::ts('Iras Donations') : E::ts('Iras Donation');
        }

        /**
         * Returns foreign keys and entity references.
         *
         * @return array
         *   [CRM_Core_Reference_Interface]
         */
        public static function getReferenceColumns() {
          if (!isset(Civi::$statics[__CLASS__]['links'])) {
            Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
            Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'contribution_id', 'civicrm_contribution', 'id');
            CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
          }
          return Civi::$statics[__CLASS__]['links'];
        }

        /**
         * Returns all the column names of this table
         *
         * @return array
         */
        public static function &fields() {
          if (!isset(Civi::$statics[__CLASS__]['fields'])) {
            Civi::$statics[__CLASS__]['fields'] = [
              'contribution_id' => [
                'name' => 'contribution_id',
                'type' => CRM_Utils_Type::T_INT,
                'description' => E::ts('FK to Contact'),
                'where' => 'civicrm_iras_donation.contribution_id',
                'table_name' => 'civicrm_iras_donation',
                'entity' => 'IrasDonation',
                'bao' => 'CRM_Irasdonation_DAO_IrasDonation',
                'localizable' => 0,
                'FKClassName' => 'CRM_Contribute_DAO_Contribution',
                'add' => NULL,
              ],
              'created_date' => [
                'name' => 'created_date',
                'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
                'title' => E::ts('Created Date'),
                'description' => E::ts('Created date'),
                'where' => 'civicrm_iras_donation.created_date',
                'table_name' => 'civicrm_iras_donation',
                'entity' => 'IrasDonation',
                'bao' => 'CRM_Irasdonation_DAO_IrasDonation',
                'localizable' => 0,
                'add' => NULL,
              ],
            ];
            CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
          }
          return Civi::$statics[__CLASS__]['fields'];
        }

        /**
         * Return a mapping from field-name to the corresponding key (as used in fields()).
         *
         * @return array
         *   Array(string $name => string $uniqueName).
         */
        public static function &fieldKeys() {
          if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
            Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
          }
          return Civi::$statics[__CLASS__]['fieldKeys'];
        }

        /**
         * Returns the names of this table
         *
         * @return string
         */
        public static function getTableName() {
          return self::$_tableName;
        }

        /**
         * Returns if this table needs to be logged
         *
         * @return bool
         */
        public function getLog() {
          return self::$_log;
        }

        /**
         * Returns the list of fields that can be imported
         *
         * @param bool $prefix
         *
         * @return array
         */
        public static function &import($prefix = FALSE) {
          $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'iras_donation', $prefix, []);
          return $r;
        }

        /**
         * Returns the list of fields that can be exported
         *
         * @param bool $prefix
         *
         * @return array
         */
        public static function &export($prefix = FALSE) {
          $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'iras_donation', $prefix, []);
          return $r;
        }

        /**
         * Returns the list of indices
         *
         * @param bool $localize
         *
         * @return array
         */
        public static function indices($localize = TRUE) {
          $indices = [];
          return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
        }
      }
      
